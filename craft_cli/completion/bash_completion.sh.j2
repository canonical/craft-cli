#!/usr/bin/env bash
# Bash completion script for {{ shell_cmd }}
# This script was generated by the completion module of craft_cli. It should
# not be edited directly.

# shellcheck disable=2207

_complete_{{ shell_cmd }}(){
  local cur prev all_cmds cmd
  all_cmds=( {{ commands | join(" ") }} )
  cur="$2"
  prev="$3"
  # Remove "$cur" (the last element) from $COMP_WORDS
  COMP_WORDS=("${COMP_WORDS[@]:0:((${#COMP_WORDS[@]} - 1))}")
  # "=" gets lexed as its own word, so let the completion
  if [[ "${prev}" == "=" ]]; then
    prev="${COMP_WORDS[-2]}"
    COMP_WORDS=("${COMP_WORDS[@]:0:((${#COMP_WORDS[@]} - 1))}") # remove the last element
  fi
  # We can assume the first argument that doesn't start with a - is the command.
  for arg in "${COMP_WORDS[@]:1}"; do
    if [[ "${arg:0:1}" != "-" ]]; then
      cmd="${arg}"
      break
    elif [[ "${arg}" == "--help" ]]; then  # "--help" works the same as "help"
      cmd="help"
      break
    fi
  done

  # A function for completing each individual command.
  # Global arguments may be used either before or after the command name, so we
  # use those global arguments in each function.
  case "${cmd}" in
    {% for name, options in commands.items() %}
    {{ name }})
      case "${prev}" in
      {% for option in options.options %}
        {{ option.flag_list }})
          COMPREPLY=($({{option.completion_command}} -- "$cur"))
          return
          ;;
      {% endfor %}
        *)
          # Not in the middle of a command option, present all options.
          COMPREPLY=(
            $(compgen -W "{{options.all_args}}" -- "$cur")
            $({{options.params}} -- "$cur")
          )
          return
          ;;
      esac
      ;;
    {% endfor %}
  esac

  case "${prev}" in
    {% for opt in global_opts %}
    {{ opt.flag_list }})
      COMPREPLY=($({{ opt.completion_command }} -- "$cur"))
      return
      ;;
    {% endfor %}
  esac

  COMPREPLY=($(compgen -W "${all_cmds[*]} ${global_args[*]}" -- "$cur"))
}

complete -F _complete_{{ shell_cmd }} {{ shell_cmd }}
