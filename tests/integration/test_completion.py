# Copyright 2024 Canonical Ltd.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 3 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import textwrap
from pathlib import Path

import craft_cli
from craft_cli.completion import complete


class TestLsCommand(craft_cli.BaseCommand):
    """A copycat ls command."""

    name = "ls"
    help_msg = "Simulate ls"
    overview = "Simulates ls"

    def fill_parser(self, parser: craft_cli.dispatcher._CustomArgumentParser) -> None:
        """Fill out an argument parser with ls args."""
        parser.add_argument("-a", "--all", action="store_true", help="Output all hidden files")
        parser.add_argument(
            "--color", choices=["always", "auto", "never"], help="When to output in color"
        )
        parser.add_argument("path", nargs="*", type=Path, help="Path to list")


class TestCpCommand(craft_cli.BaseCommand):
    """A copycat cp command."""

    name = "cp"
    help_msg = "cp"
    overview = "cp"

    def fill_parser(self, parser: craft_cli.dispatcher._CustomArgumentParser) -> None:
        """Fill out an argument parser with cp args."""
        parser.add_argument("src", type=Path)
        parser.add_argument("dest", type=Path)

def test_completion() -> None:
    def _get_dispatcher() -> craft_cli.Dispatcher:
        basic_group = craft_cli.CommandGroup("basic", [TestLsCommand, TestCpCommand])

        return craft_cli.Dispatcher(
            appname="pybash",
            commands_groups=[basic_group],
            extra_global_args=[],
        )

    actual_output = complete("testcraft", _get_dispatcher)

    expected_output = textwrap.dedent("""\
        #!/usr/bin/env bash
        # Bash completion script for testcraft
        # This script was generated by the completion module of craft_cli. It should
        # not be edited directly.

        # shellcheck disable=2207

        _complete_testcraft(){
          local cur prev all_cmds cmd
          all_cmds=( ls cp )
          cur="$2"
          prev="$3"
          # Remove "$cur" (the last element) from $COMP_WORDS
          COMP_WORDS=("${COMP_WORDS[@]:0:((${#COMP_WORDS[@]} - 1))}")
          # "=" gets lexed as its own word, so let the completion
          if [[ "${prev}" == "=" ]]; then
            prev="${COMP_WORDS[-2]}"
            COMP_WORDS=("${COMP_WORDS[@]:0:((${#COMP_WORDS[@]} - 1))}") # remove the last element
          fi
          # We can assume the first argument that doesn't start with a - is the command.
          for arg in "${COMP_WORDS[@]:1}"; do
            if [[ "${arg:0:1}" != "-" ]]; then
              cmd="${arg}"
              break
            elif [[ "${arg}" == "--help" ]]; then  # "--help" works the same as "help"
              cmd="help"
              break
            fi
          done

          # A function for completing each individual command.
          # Global arguments may be used either before or after the command name, so we
          # use those global arguments in each function.
          case "${cmd}" in
            ls)
              case "${prev}" in
                -h|--help)
                  COMPREPLY=($(compgen -- "$cur"))
                  return
                  ;;
                --color)
                  COMPREPLY=($(compgen -W 'always auto never' -- "$cur"))
                  return
                  ;;
                *)
                  # Not in the middle of a command option, present all options.
                  COMPREPLY=(
                    $(compgen -W "-h --help -a --all --color" -- "$cur")
                    $(compgen -o bashdefault -A file -- "$cur")
                  )
                  return
                  ;;
              esac
              ;;
            cp)
              case "${prev}" in
                -h|--help)
                  COMPREPLY=($(compgen -- "$cur"))
                  return
                  ;;
                *)
                  # Not in the middle of a command option, present all options.
                  COMPREPLY=(
                    $(compgen -W "-h --help" -- "$cur")
                    $(compgen -o bashdefault -A file -- "$cur")
                  )
                  return
                  ;;
              esac
              ;;
          esac

          case "${prev}" in
            --verbosity)
              COMPREPLY=($(compgen -W 'quiet brief verbose debug trace' -- "$cur"))
              return
              ;;
          esac

          COMPREPLY=($(compgen -W "${all_cmds[*]} ${global_args[*]}" -- "$cur"))
        }

        complete -F _complete_testcraft testcraft"""
    )

    assert actual_output == expected_output
